HTML
HTML is what is used to display content on the web page. It is the language that most websites are written with
to display web pages and ensure their functionality. It is a combination of hypertext(This defines
the internal links) and markup language defines the layout and presentation. HTML documents are files that end with
a .html or .htm extension and they can be viewed using a web browser such as Google chrome, safari, Mozilla fireox.
E.g index.html( index is the name of the file.html is the file extension(tells the browser the file contains html).
A typical webpage is made up of 3 seperate layers:-a)content layer b)presentation layer c) behaviour layer.css presents
the presentation layer. The behaviour layer is handle by javascript. HTML provides the content.

The head element contains information about the web page. You can put many elements inside of it such as: Title => sets the title of the page.


Link => links elements to html, such as the page icon, CSS file, etc. We will see the other tags later on in the course.
Here’s an example down below, ” rel” and “href” are called tag attributes, we will get back to them later in the course.
For now, to set the icon, you need to set rel to “icon” and href to the link to your image.
e.g
<head>

 <title>My Beautiful Page</title>

 <link rel="icon" href="favicon.ico" type="image/x-icon"/>

</head>
<br> is used to jump a line.
<br> - To bold a text
<i> - To italicize a text
<del> - To indicate that a text has been removed.
<p> can contain text bt not images.

HTML Attributes

HTML attributes provide additional information about an HTML element. Attributes can be considered as properties of the element.
An element can have a single attribute, many attributes, or no attributes at all.
Attributes are placed in the opening tag,
with a space after the element declaration (or after another attribute if there are multiple).
If u want a text to pop up when the mouse is on it. Do like: e.g <h2 title>This is a subheading</h2>
So title here is an attribute for the h2 element.

The Image Tag:

The < img > tag is responsible for adding images to your HTML page. Basically, the “src” attribute takes the URL of your image or its path on your computer. The “alt” attribute is your plan B if your image fails to load.
Unlike most of the elements we have encountered thus far, the img element does not have a closing tag.
<!-- Incorrect img declaration  -->

<img src="path/to/image/dog.jpg" alt="A dog" > </img>

<!-- Correct img declaration  -->

<img src="path/to/image/dog.jpg" alt="A dog" >

Linked Page
One of the most important aspects of the World Wide Web is the ability to connect with other parts of the Web.
Without a method to redirect HTML pages to other web addresses, the Web as we know it would cease to exist.
We can connect an HTML page to other web pages by creating a hyperlink using the anchor tag.
The a tag:
<a href="https://gomycode.tn/">Take me to GoMyCode's Website</a>
Links allow users to navigate between different web pages. If you click on a link , you can jump to another document.
Links are defined with the < a > tag, also called anchor element.
The “href” attribute defines the path once it’s clicked on.

Internal Link:
Links can be local too. Local links allow users to navigate on the same web page.
In other words, you can click on a link and jump to the end of the page,
or to an element on your web page.
e.g
<body>

    <a name="TopOfThePage"> </a>

    <h1>Link Up Top</h1>

    <p>

      Lorem, ipsum dolor sit amet consectetur adipisicing elit. Iure in ducimus,

      tenetur facere repellendus ipsa beatae minus est laudantium nobis tempora

      suscipit sunt tempore reprehenderit nulla necessitatibus! Eius sed

      provident iusto dicta corrupti itaque, ducimus quo illo cupiditate,

      quaerat blanditiis, quod accusamus doloremque. 


      Neque unde nostrum dignissimos ad quam ratione.

    </p>

    <img src="Gomycode.png" alt="Gomycode" />

    <p>

      Lorem ipsum dolor sit amet consectetur adipisicing elit. 

      


      Quia, consequuntur!

    </p>

    <img src="Track.jpg" alt="Gomycode">

    <a href="#TopOfThePage"> Let's go up Top </a>

  </body>
The Audio Tag:

To play an audio HTML file, use the < audio > element:
The controls attribute is necessary. It adds audio controls like play, pause, and volume control.
The < source > element allows you to specify alternative audio files that the browser can choose from.
The browser will use the first recognized format.
The text between < audio >< /audio> will be displayed only if the audio file is not supported by the browser.
e.g
<audio controls>

    <source src="test.mp3" type="audio/mpeg">

        Please Check the audio Extension

</audio>

The Video Tag:

We can also add videos to our web page by using the < video > element:
It is preferable to include height and width attributes in your tag.
In addition, to automatically start a video we use the autoplay attribute:
e.g
<video width="320" height="240" autoplay>

	<source src="test.mp4" type="video/mp4" />

	Please Check the video extension.

</video>

The Iframe Tag:
We can also add videos from YouTube by simply using the iframe tag.
Just go to YouTube, pick a video, go to Share -> Embed -> Copy tag < iframe >
The src attribute in the video tag replaces the <source> tag.
HTML Lists :

Lists are used to arrange related pieces of information so they are connected, understandable, and easy to read. In modern web development, lists are workhorse elements, frequently used for navigation as well as general content.


Lists are advantageous from a structural point of view because they help create a well-structured, highly accessible, and easy-to-maintain document. They are also useful because they provide specialized elements to which you can attach CSS styles. Semantically correct lists help visitors read your website and they simplify maintenance when your pages need to be updated.


There are many types of lists. Let's have a look at the most used ones:



Ordered list

Unordered list

Description list


Unordered List:

To create an unordered list, we use the HTML tag <ul> .
An unordered list is typically rendered as a bulleted list but 
we can change the style of the list using the type attribute.
Every element of the list is wrapped with tag <li>
We can also change the styling type by using type attribute:
e.g
<h1>Tracks At GoMyCode</h1>



    <!-- Disc bullets -->

    <ul type="disc">

      <li>AI Track</li>

      <li>Web Track</li>

      <li>Game Track</li>

      <li>Data Science Track</li>

    </ul>



    <!-- Square bullets -->

    <ul type="square">

      <li>AI Track</li>

      <li>Web Track</li>

      <li>Game Track</li>

      <li>Data Science Track</li>

    </ul>
Ordered List:

The HTML <ol> element represents an ordered list of items,
typically rendered as a numbered list but, like the unordered list,
it can be changed.
e.g
<h1>Web Ordered Languages:</h1>

    <ol>

      <li>HTML</li>

      <li>CSS</li>

      <li>JS</li>

    </ol>
Our code output would be :


Web Ordered Languages:


HTML

CSS

JS


Ordered list type values can be used to change the numbering scheme, and include the following:



1: Default numeric scheme

I: Upper-case Roman numerals

i: Lower-case Roman numerals

A: Upper-case alphabet

a: Lower-case alphabet


Here’s an example. You can try to do the rest by yourself.


  <!-- Upper-case Roman Numerals -->

    <ol type="I">

      <li>Create a folder named "GoMyCode" on your Desktop</li>

      <li>Create a new folder in GoMyCode folder name it whatever you want.</li>

      <li>Create a new folder inside it and name it "res"</li>

      <li>Create a new folder inside it and name it "css"</li>

    </ol>
Description List:

The HTML <dl> element represents a description list.
The element encloses a list of groups that contain terms (specified using the <dt> element) and
descriptions (provided by <dd> elements). The common uses for this element are:
implementing a glossary or displaying metadata (a list of key-value pairs).
<p>The House Sigils In GOT:</p>



<dl>

	<dt>House Stark</dt>

	<dd>The Direwolf</dd>



	<dt>House Lannister</dt>

	<dd>The Lion</dd>



	<dt>House Targaryen</dt>

	<dd>The Three-Headed Dragon</dd>



	<dt>House Baratheon</dt>

	<dd>The Stag</dd>

</dl>
Div Tag:

<div> is one of the most useful tags in HTML.
The <div>, a block-level element, is like a component or a bag.
It can contain many HTML elements in order to apply changes to them as a whole section.


<div> helps in organizing your code as well as improving creativity with CSS.
We will learn how it does that later in the course.

What Is a Semantic Tag?

Up until now, we have focused on using HTML to structure our web pages and provide a clear presentation of the content. Following the HTML5 standard, you need to clearly indicate the meaning of each component of your web page’s content, this is what we call semantic HTML.


Focusing on using HTML to semantically structure your web content gives you several advantages:



Making your web content vastly more accessible to readers with disabilities.

CSS style application becoming more consistent and predictable.

Search enginesoptimizing and better understanding your web pages.


The Semantic Tags:

As we have already mentioned, semantic tags are used to add meaning to our HTML document. A code should be comprehensible by whoever reads it.


Our document is usually divided into three different sections:


< header >

The header is typically a group of introductory or navigational aids. It can contain some elements such as a logo, a search form, a slogan, etc.


< main >

The main section will be explained further in the next slides.


< footer >

The footer typically contains information about the author, contact information, copyright data, etc.
Nav Tag:

Now that we have our page divided into header, main, and footer, let’s move on to more semantic tags that can be useful to our code.


The <nav> element defines a set of navigation links.
Section Tag:

The <section> element defines a section in a document.


For example, if we want to split our home page into several sections for introduction, content, contact information, etc.


<section>

<h1> Contact information <h1>

<p> Go My Code is an EdTech Startup.. </p>

</section>


Article Tag:

The <article> element defines an article in a document.


It can mean a blog entry, a news/scholarly article, or a forum post.


<article>

<h1> What is the perks of being a Web Developer? <h1>

<!-- Article contents -->

</article>


Aside Tag:

HTML offers many semantic elements to define distinct parts of a web page.


We’ll list the two most used semantic elements :



The <aside> element : Is like a sidebar. It allows us to navigate through the main content.

The <figure> and <figcaption> elements : it regroups images and captions in one element.


The Advantages of Semantic Tags:

By adding semantic tags to your document you provide extra information about that document which helps in communication. Semantic tags produce the meaning of a page and its content, making it extremely clear to the browser.

What Is an HTML Form?

In HTML, forms are a way of receiving input from users and they are very useful for collecting website data. Forms are highly relevant in today’s modern age as they are commonly used for sign-ups, authentication, and comments.


A form can be created with the <form> tag.


<html>

 <head>

 </head>

 <body>

   <form>

     A form

   </form>

 </body>

</html>


The code output would be :
A form


Quick Look

Here’s a quick look at what a form would look like using only HTML. Don’t mind the tags inside the <form> , we are going to have a closer look at them later.


    <form>

      <label>Name:</label>

      <input type="text" name="first name" placeholder="Type your name here" />

      




      <label>Number:</label>

      <input type="number" name="number" value="23123456" />

      




      <label>Birth Date:</label>

      <input type="date" name="birthday" />

      




      <label>Password:</label>

      <input type="password" name="password" />

      




      <input type="submit" value="Submit" />

    </form>
Form Input:

The most useful component of a form is the input tag, which creates a text field where users can enter data. Here’s an example:


<form>

     Search <input type = "text" name = "search" />

 </form>


Output




As seen in the code above, there is a type and name associated with inputs.
The type defines the nature of the input (text, URL, email,etc.), while the name allows us to access the input data for future use. You can think of the name as a variable in which the input data is stored. Other properties of input include:



Size

Value

Max length

Read only


Selection Inputs

You can use <select> (with nested <option>) elements to create a drop-down selection of items that a user can choose from.


      <select>

        <option value="WebTrack">Web Track</option>

        <option value="AITrack">AI Track</option>

        <option value="GameTrack">Game Track</option>

        <option value="DataScienceTrack">Data Science Track</option>

      </select>





Text Area:

If you want your user to be able to include new lines (by pressing return) in their text input, you can use a <textarea> element:


The rows attribute specifies the visible number of lines in a text area.


The columns (cols) attribute specifies the visible width of a text area.


    <textarea name="message" cols="30" rows="5">

        Welcome to GoMyCode

    </textarea>





Buttons:

A <button> element should be used whenever you want to create a clickable button to perform a certain action on the page.


<button> elements are simple to define, and have three different type values:



Submit: submits form data to a server.

Reset: resets all the data in the current form.

Button: indicates no default behavior. This type of button will be more useful when we start dealing with Javascript.


    <form>

      <label>First Name:</label>

      <input type="text" name="firstName" />

      


      <label>Last Name:</label>

      <input type="text" name="lastName" id="lastName" />

      


      <!-- This button will submit the form, causing the page to redirect -->

      <button type="submit">Submit Name</button>

    </form>
